/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package aes;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.time.LocalTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author ducle
 */
public class AESForm extends javax.swing.JFrame {

    /**
     * Creates new form AESForm
     */
    public AESForm() {
        initComponents();

        //Set title icon
        Image icon = Toolkit.getDefaultToolkit().getImage(".\\icon\\AES_icon.png");
        setIconImage(icon);

        //Đặt form ra giữa
        setLocationRelativeTo(null);

        txtKey1.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateNoti1();

            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateNoti1();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateNoti1();
            }
        });

        txtKey2.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateNoti2();

            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateNoti2();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateNoti2();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbSizeKey = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtLoopNumber = new javax.swing.JTextField();
        btnThoat = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbTypeBanRo1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtBanRo1 = new javax.swing.JTextArea();
        cbTypeKey1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtKey1 = new javax.swing.JTextField();
        cbTypeBanMa1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        btnMaHoa = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtTime1 = new javax.swing.JTextField();
        txtNoti1 = new javax.swing.JLabel();
        btnReset1 = new javax.swing.JButton();
        btnCopy1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtBanMa1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbTypeBanMa2 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtBanMa2 = new javax.swing.JTextArea();
        cbTypeKey2 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtKey2 = new javax.swing.JTextField();
        cbTypeBanRo2 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        btnGiaiMa = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        txtTime2 = new javax.swing.JTextField();
        txtNoti2 = new javax.swing.JLabel();
        btnReset2 = new javax.swing.JButton();
        btnCopy2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtBanRo2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mã hóa và giải mã AES");
        setBackground(new java.awt.Color(102, 255, 255));
        setResizable(false);

        jPanel3.setForeground(new java.awt.Color(102, 255, 255));

        jLabel1.setText("Độ dài khóa:");

        cbSizeKey.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128", "192", "256" }));
        cbSizeKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSizeKeyActionPerformed(evt);
            }
        });

        jLabel2.setText("Số lần lặp:");

        txtLoopNumber.setText("10");
        txtLoopNumber.setEnabled(false);

        btnThoat.setText("Thoát");
        btnThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSizeKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLoopNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnThoat, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbSizeKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtLoopNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThoat))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Mã hóa");

        jLabel4.setText("Bản rõ:");

        cbTypeBanRo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hex", "Chuỗi" }));

        txtBanRo1.setColumns(20);
        txtBanRo1.setLineWrap(true);
        txtBanRo1.setRows(3);
        jScrollPane1.setViewportView(txtBanRo1);

        cbTypeKey1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hex", "Chuỗi" }));

        jLabel5.setText("Khóa:");

        cbTypeBanMa1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hex", "Chuỗi" }));

        jLabel6.setText("Bản mã:");

        btnMaHoa.setText("Mã hóa");
        btnMaHoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaHoaActionPerformed(evt);
            }
        });

        jLabel11.setText("Thời gian (s):");

        txtTime1.setText("00:00:00.00");
        txtTime1.setEnabled(false);

        txtNoti1.setFont(new java.awt.Font("Dialog", 3, 11)); // NOI18N
        txtNoti1.setForeground(new java.awt.Color(255, 51, 51));
        txtNoti1.setText(" ");

        btnReset1.setText("Reset");
        btnReset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReset1ActionPerformed(evt);
            }
        });

        btnCopy1.setText("Sao chép");
        btnCopy1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopy1ActionPerformed(evt);
            }
        });

        txtBanMa1.setColumns(20);
        txtBanMa1.setLineWrap(true);
        txtBanMa1.setRows(3);
        txtBanMa1.setEnabled(false);
        jScrollPane3.setViewportView(txtBanMa1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(868, 868, 868))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbTypeBanRo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cbTypeBanMa1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(cbTypeKey1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNoti1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtKey1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCopy1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(btnReset1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtTime1)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMaHoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(cbTypeBanRo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtKey1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbTypeKey1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNoti1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbTypeBanMa1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnReset1)
                        .addGap(18, 18, 18)
                        .addComponent(btnMaHoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCopy1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 255));
        jLabel7.setText("Giải mã");

        jLabel8.setText("Bản mã:");

        cbTypeBanMa2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hex", "Chuỗi" }));

        txtBanMa2.setColumns(20);
        txtBanMa2.setLineWrap(true);
        txtBanMa2.setRows(3);
        jScrollPane2.setViewportView(txtBanMa2);

        cbTypeKey2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hex", "Chuỗi" }));

        jLabel9.setText("Khóa:");

        cbTypeBanRo2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hex", "Chuỗi" }));

        jLabel10.setText("Bản rõ:");

        btnGiaiMa.setText("Giải mã");
        btnGiaiMa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGiaiMaActionPerformed(evt);
            }
        });

        jLabel19.setText("Thời gian (s):");

        txtTime2.setText("00:00:00.00");
        txtTime2.setEnabled(false);

        txtNoti2.setFont(new java.awt.Font("Dialog", 3, 11)); // NOI18N
        txtNoti2.setForeground(new java.awt.Color(255, 51, 51));
        txtNoti2.setText(" ");

        btnReset2.setText("Reset");
        btnReset2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReset2ActionPerformed(evt);
            }
        });

        btnCopy2.setText("Sao chép");
        btnCopy2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopy2ActionPerformed(evt);
            }
        });

        txtBanRo2.setColumns(20);
        txtBanRo2.setLineWrap(true);
        txtBanRo2.setRows(3);
        txtBanRo2.setEnabled(false);
        jScrollPane4.setViewportView(txtBanRo2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(868, 868, 868))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbTypeBanMa2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cbTypeBanRo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(cbTypeKey2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNoti2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtKey2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCopy2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReset2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGiaiMa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtTime2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(cbTypeBanMa2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtKey2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbTypeKey2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNoti2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbTypeBanRo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnReset2)
                        .addGap(18, 18, 18)
                        .addComponent(btnGiaiMa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTime2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCopy2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnThoatActionPerformed

    private void cbSizeKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSizeKeyActionPerformed
        String sizeKey = cbSizeKey.getSelectedItem().toString();
        updateNoti1();
        updateNoti2();
        switch (sizeKey) {
            case "128":
                txtLoopNumber.setText("10");
                break;
            case "192":
                txtLoopNumber.setText("12");
                break;
            case "256":
                txtLoopNumber.setText("14");
                break;
        }
    }//GEN-LAST:event_cbSizeKeyActionPerformed

    private void btnReset2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReset2ActionPerformed
        txtBanMa2.setText("");
        txtBanRo2.setText("");
        txtKey2.setText("");
        txtTime2.setText("00:00:00.00");
        txtNoti2.setText(" ");

        cbTypeBanMa2.setSelectedIndex(0);
        cbTypeBanRo2.setSelectedIndex(0);
        cbTypeKey2.setSelectedIndex(0);
    }//GEN-LAST:event_btnReset2ActionPerformed

    private void btnCopy2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopy2ActionPerformed
        StringSelection stringSelection = new StringSelection(txtBanRo2.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_btnCopy2ActionPerformed

    private void btnGiaiMaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGiaiMaActionPerformed
        LocalTime time1, time2, timeDelay;
        time1 = LocalTime.now();
        
        int size = 0; //Kích thước khóa
        
        String strOutPlaint = ""; //Chuỗi đã giải mã
        
        int ver = 0; //Số phiên bản
        
        byte[] byteKey = null; //Mảng key
        int[] byteKeyExpansion; //Mảng key mở rộng
        
        byte[] byteInCipher = null; //Mảng byte chuyển từ chuỗi strInCipher
        byte[][][] byteInCipherConvert; //Mảng byte chuyển từ mảng byteInCipher
        byte[][][] byteOutPlaint; //Mảng byte chuyển được giải mã từ byteInCipherConvert
        byte[] byteOutPlaintConvert; //Mảng byte chuyển từ mảng byteOutPlaint
        
        size = Integer.parseInt(cbSizeKey.getSelectedItem().toString());
        
        AESAlgorithm aes = new AESAlgorithm(size);
        
        switch (cbTypeKey2.getSelectedIndex()) {
            case 0: //Hex
                byteKey = aes.decodeHexString(txtKey2.getText()); //Chuyển chuỗi Hex thành mảng Hex[]
                break;
            case 1: //Chuoi
                try {
                byteKey = txtKey2.getText().getBytes("UTF-8"); //Chuyển chuỗi đầu vào sang byte[]
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(AESForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            break;
        }
        
        byteKeyExpansion = aes.createKeyExpansion(byteKey); //Tạo khóa mở rộng
        
        switch (cbTypeBanMa2.getSelectedIndex()) {
            case 0: //Hex
                byteInCipher = aes.decodeHexString(txtBanMa2.getText()); //Chuyển chuỗi Hex thành mảng Hex[]
                break;
            case 1: //Chuoi
                try {
                byteInCipher = txtBanMa2.getText().getBytes("UTF-8"); //Chuyển chuỗi đầu vào sang byte[]
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(AESForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            break;
        }
        
        //Xác định số phiên bản
        if(byteInCipher.length%16==0){
            ver = byteInCipher.length/16;
        }else{
            ver = byteInCipher.length/16+1;
        }
        
        //Chuyển mã thành nhiều phiên bản byte[][]
        byteInCipherConvert = new byte[ver][4][4];
        for(int v = 0; v < ver; v++){
            for(int i = 0; i < 4; i++){
                for(int j = 0; j < 4; j++){
                    if(16*v+4*i+j < byteInCipher.length){
                        byteInCipherConvert[v][j][i] = byteInCipher[16*v+4*i+j];
                    }else{
                        byteInCipherConvert[v][j][i] = (byte) 0x20; //Thêm khoảng trống
                    }
                }
            }
        }
        
        //Giải mã các phiên bản
        byteOutPlaint = new byte[ver][4][4];
        byteOutPlaintConvert = new byte[ver*4*4];
        for(int v = 0; v <ver; v++){
            byteOutPlaint[v] = aes.invCipher(byteInCipherConvert[v], byteKeyExpansion);
            switch (cbTypeBanRo2.getSelectedIndex()) {
                case 0: //Hex
                    StringBuilder sb = new StringBuilder();
                    for (int i = 0; i < 4; i++) {
                        for (int j = 0; j < 4; j++) {
                            sb.append(String.format("%02X", byteOutPlaint[v][j][i]));
                        }
                    }
                    strOutPlaint += sb.toString();
                    break;
                case 1: //Chuoi
                    for (int i = 0; i < 4; i++) {
                        for (int j = 0; j < 4; j++) {
                            byteOutPlaintConvert[16 * v + 4 * i + j] = byteOutPlaint[v][j][i];
                        }
                    }
                    strOutPlaint = new String(byteOutPlaintConvert, StandardCharsets.UTF_8);
                    break;
            }
        }
        txtBanRo2.setText(strOutPlaint);
        
        time2 = LocalTime.now();

        timeDelay = time2.minusHours(time1.getHour()).minusMinutes(time1.getMinute()).minusSeconds(time1.getSecond()).minusNanos(time1.getNano());
        System.out.println(""+time1);
        System.out.println(""+time2);
        String strTimeDelay = ""+timeDelay;
        if(strTimeDelay.length()<16){
            txtTime2.setText(strTimeDelay);
        }else{
            txtTime2.setText(strTimeDelay.substring(0, 16));
        }
    }//GEN-LAST:event_btnGiaiMaActionPerformed

    private void btnCopy1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopy1ActionPerformed
        StringSelection stringSelection = new StringSelection(txtBanMa1.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_btnCopy1ActionPerformed

    private void btnReset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReset1ActionPerformed
        txtBanMa1.setText("");
        txtBanRo1.setText("");
        txtKey1.setText("");
        txtTime1.setText("00:00:00.00");
        txtNoti1.setText(" ");

        cbTypeBanMa1.setSelectedIndex(0);
        cbTypeBanRo1.setSelectedIndex(0);
        cbTypeKey1.setSelectedIndex(0);
    }//GEN-LAST:event_btnReset1ActionPerformed

    private void btnMaHoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaHoaActionPerformed
        LocalTime time1, time2, timeDelay;
        time1 = LocalTime.now();

        int size = 0;
        int ver = 0; //Số phiên bản

        String strOutCipher = ""; //Chuỗi đã mã hóa

        byte[] byteKey = null; //Mảng key
        int[] byteKeyExpansion; //Mảng key mở rộng

        byte[] byteInPlaint = null; //Mảng byte chuyển từ chuỗi strInPlaint
        byte[][][] byteInPlaintConvert; //Mảng byte chuyển từ mảng byteInPlaint
        byte[][][] byteOutCipher; //Mảng byte chuyển được mã hóa từ byteInPlaintConvert
        byte[] byteOutCipherConvert; //Mảng byte chuyển từ mảng byteOutCipher

        size = Integer.parseInt(cbSizeKey.getSelectedItem().toString());

        AESAlgorithm aes = new AESAlgorithm(size);

        switch (cbTypeKey1.getSelectedIndex()) {
            case 0: //Hex
            byteKey = aes.decodeHexString(txtKey1.getText()); //Chuyển chuỗi Hex thành mảng Hex[]
            break;
            case 1: //Chuoi
            try {
                byteKey = txtKey1.getText().getBytes("UTF-8"); //Chuyển chuỗi đầu vào sang byte[]
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(AESForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            break;
        }

        byteKeyExpansion = aes.createKeyExpansion(byteKey); //Tạo khóa mở rộng

        switch (cbTypeBanRo1.getSelectedIndex()) {
            case 0: //Hex
            byteInPlaint = aes.decodeHexString(txtBanRo1.getText()); //Chuyển chuỗi Hex thành mảng Hex[]
            break;
            case 1: //Chuoi
            try {
                byteInPlaint = txtBanRo1.getText().getBytes("UTF-8"); //Chuyển chuỗi đầu vào sang byte[]
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(AESForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            break;
        }

        //Xác định số phiên bản
        if (byteInPlaint.length % 16 == 0) {
            ver = byteInPlaint.length / 16;
        } else {
            ver = byteInPlaint.length / 16 + 1;
        }

        //Chuyển mã thành nhiều phiên bản byte[][]
        byteInPlaintConvert = new byte[ver][4][4];
        for (int v = 0; v < ver; v++) {
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < 4; j++) {
                    if (16 * v + 4 * i + j < byteInPlaint.length) {
                        byteInPlaintConvert[v][j][i] = byteInPlaint[16 * v + 4 * i + j];
                    } else {
                        byteInPlaintConvert[v][j][i] = (byte) 0x20; //Thêm khoảng trống
                    }
                }
            }
        }

        //Mã hóa các phiên bản
        byteOutCipher = new byte[ver][4][4];
        byteOutCipherConvert = new byte[ver * 4 * 4];
        for (int v = 0; v < ver; v++) {
            byteOutCipher[v] = aes.cipher(byteInPlaintConvert[v], byteKeyExpansion); //Mã hóa phiên bản v
            switch (cbTypeBanMa1.getSelectedIndex()) {
                case 0: //Hex
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < 4; i++) {
                    for (int j = 0; j < 4; j++) {
                        sb.append(String.format("%02X", byteOutCipher[v][j][i]));
                    }
                }
                strOutCipher += sb.toString();
                break;
                case 1: //Chuoi
                for (int i = 0; i < 4; i++) {
                    for (int j = 0; j < 4; j++) {
                        byteOutCipherConvert[16 * v + 4 * i + j] = byteOutCipher[v][j][i];
                    }
                }
                strOutCipher = new String(byteOutCipherConvert, StandardCharsets.UTF_8);
                break;
            }

        }
        txtBanMa1.setText(strOutCipher);

        time2 = LocalTime.now();

        timeDelay = time2.minusHours(time1.getHour()).minusMinutes(time1.getMinute()).minusSeconds(time1.getSecond()).minusNanos(time1.getNano());
        System.out.println(""+time1);
        System.out.println(""+time2);
        String strTimeDelay = ""+timeDelay;
        if(strTimeDelay.length()<=17){
            txtTime1.setText(strTimeDelay);
        }else{
            txtTime1.setText(strTimeDelay.substring(0, 16));
        }
    }//GEN-LAST:event_btnMaHoaActionPerformed

    private void updateNoti1() {
        int sizeKey = Integer.parseInt(cbSizeKey.getSelectedItem().toString());
        int lengKey = 0;

        switch (sizeKey) {
            case 128:
                lengKey = 16;
                break;
            case 192:
                lengKey = 24;
                break;
            case 256:
                lengKey = 32;
                break;
        }

        switch (cbTypeKey1.getSelectedIndex()) {
            case 0: //Hex
                if (txtKey1.getText().length() == 0) {
                    txtNoti1.setText(" ");
                } else if (txtKey1.getText().length() < lengKey * 2) {
                    txtNoti1.setText("Độ dài khóa chưa đủ");
                } else if (txtKey1.getText().length() > lengKey * 2) {
                    txtNoti1.setText("Độ dài khóa vượt quá");
                } else {
                    txtNoti1.setText(" ");
                }
                break;
            case 1: //Chuỗi
                int bytestr = 0;
                try {
                    bytestr = txtKey1.getText().getBytes("UTF-8").length;
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(AESForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (bytestr == 0) {
                    txtNoti1.setText(" ");
                } else if (bytestr < lengKey) {
                    txtNoti1.setText("Độ dài khóa chưa đủ");
                } else if (bytestr > lengKey) {
                    txtNoti1.setText("Độ dài khóa vượt quá");
                } else {
                    txtNoti1.setText(" ");
                }
                break;
        }
    }

    private void updateNoti2() {
        int sizeKey = Integer.parseInt(cbSizeKey.getSelectedItem().toString());
        int lengKey = 0;

        switch (sizeKey) {
            case 128:
                lengKey = 16;
                break;
            case 192:
                lengKey = 24;
                break;
            case 256:
                lengKey = 32;
                break;
        }

        switch (cbTypeKey2.getSelectedIndex()) {
            case 0: //Hex
                if (txtKey2.getText().length() == 0) {
                    txtNoti2.setText(" ");
                } else if (txtKey2.getText().length() < lengKey * 2) {
                    txtNoti2.setText("Độ dài khóa chưa đủ");
                } else if (txtKey2.getText().length() > lengKey * 2) {
                    txtNoti2.setText("Độ dài khóa vượt quá");
                } else {
                    txtNoti2.setText(" ");
                }
                break;
            case 1: //Chuỗi
                int bytestr = 0;
                try {
                    bytestr = txtKey2.getText().getBytes("UTF-8").length;
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(AESForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (bytestr == 0) {
                    txtNoti2.setText(" ");
                } else if (bytestr < lengKey) {
                    txtNoti2.setText("Độ dài khóa chưa đủ");
                } else if (bytestr > lengKey) {
                    txtNoti2.setText("Độ dài khóa vượt quá");
                } else {
                    txtNoti2.setText(" ");
                }
                break;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AESForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AESForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AESForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AESForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AESForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopy1;
    private javax.swing.JButton btnCopy2;
    private javax.swing.JButton btnGiaiMa;
    private javax.swing.JButton btnMaHoa;
    private javax.swing.JButton btnReset1;
    private javax.swing.JButton btnReset2;
    private javax.swing.JButton btnThoat;
    private javax.swing.JComboBox<String> cbSizeKey;
    private javax.swing.JComboBox<String> cbTypeBanMa1;
    private javax.swing.JComboBox<String> cbTypeBanMa2;
    private javax.swing.JComboBox<String> cbTypeBanRo1;
    private javax.swing.JComboBox<String> cbTypeBanRo2;
    private javax.swing.JComboBox<String> cbTypeKey1;
    private javax.swing.JComboBox<String> cbTypeKey2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea txtBanMa1;
    private javax.swing.JTextArea txtBanMa2;
    private javax.swing.JTextArea txtBanRo1;
    private javax.swing.JTextArea txtBanRo2;
    private javax.swing.JTextField txtKey1;
    private javax.swing.JTextField txtKey2;
    private javax.swing.JTextField txtLoopNumber;
    private javax.swing.JLabel txtNoti1;
    private javax.swing.JLabel txtNoti2;
    private javax.swing.JTextField txtTime1;
    private javax.swing.JTextField txtTime2;
    // End of variables declaration//GEN-END:variables
}
